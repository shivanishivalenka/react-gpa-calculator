{"version":3,"sources":["Calculator.js","SubjectNumber.js","Cgpa.js","App.js","reportWebVitals.js","index.js"],"names":["Calculator","props","rows","handelCgpa","setGrades","setCredits","credits","grades","className","Array","map","value","index","type","name","min","onChange","e","newObj","target","newGr","disabled","selected","onClick","SubjectNumber","setInputFields","handelInputFields","Cgpa","cgpa","error","cgpaLabel","App","useState","inputFields","setRows","setCgpa","setError","setCgpaLabel","console","log","Number","cred","Object","values","grad","length","nr","dr","i","val","isNaN","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0647bef7.chunk.js","sourcesContent":["import './App.css'\r\nconst Calculator = (props) => {\r\n    const {rows, handelCgpa,setGrades,setCredits,credits,grades,} = props;\r\n  \r\n    return (\r\n      <div>\r\n        <table  className = \"table-component\">\r\n          <tbody>\r\n            <tr>\r\n              <th>S.No</th>\r\n              <th>Credits</th>\r\n              <th>Grades</th>\r\n            </tr>\r\n            {/* using map to get multiple input fields for all subjects!*/}\r\n            {[...Array(rows)].map((value, index) => (\r\n              <tr key={index}>\r\n                <th>{index + 1}</th> {/*S.no*/}\r\n                <th>\r\n                  <input\r\n                    type=\"number\"\r\n                    name={index}\r\n                    className = \"input-fields\"\r\n                    min=\"0\"\r\n                    onChange={(e) => {\r\n                      const newObj = {};\r\n                      newObj[index] = e.target.value;\r\n                      setCredits({ ...credits, ...newObj });\r\n                      //console.log(credits);\r\n                    }}\r\n                  ></input>\r\n                </th>\r\n                {/*credits*/}\r\n                <th>\r\n                  {/*grades*/}\r\n                  <select\r\n                    onChange={(e) => {\r\n                      const newGr = {};\r\n                      newGr[index] = e.target.value;\r\n                      setGrades({ ...grades, ...newGr });\r\n                    }}\r\n                  >\r\n                    <option value=\"\" disabled selected></option>\r\n                    <option value=\"10\">O</option>\r\n                    <option value=\"9\">A+</option>\r\n                    <option value=\"8\">A</option>\r\n                    <option value=\"7\">B+</option>\r\n                    <option value=\"6\">B</option>\r\n                    <option value=\"5\">C</option>\r\n                    <option value=\"0\">F</option>\r\n                  </select>\r\n                </th>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n  \r\n        <button onClick={handelCgpa}>Calculate</button>\r\n      </div>\r\n\r\n    );\r\n  };\r\n  \r\nexport default Calculator;\r\n  ","const SubjectNumber = (props) =>{\r\n    const {setInputFields,handelInputFields} = props;\r\n    return (\r\n    <div className = \"subj\">\r\n        <label>Number of Subjects:</label>\r\n        <input type=\"number\"\r\n        className = \"input-fields\"\r\n        min = \"1\" \r\n        onChange = {(e) => setInputFields(e.target.value)}></input>\r\n        <button onClick = {handelInputFields}>Done</button>\r\n    </div>\r\n    )\r\n\r\n}\r\n \r\n\r\nexport default SubjectNumber;","const Cgpa = (props) =>{\r\n    const {cgpa,error,cgpaLabel} = props;\r\n    return (\r\n        <div>\r\n            <p className = \"text\">{cgpaLabel} <span className = \"cgpa\">{cgpa}</span></p>\r\n            <p className = \"error\">{error}</p>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Cgpa;","import './App.css';\r\nimport Calculator from './Calculator';\r\nimport { useState } from 'react'\r\nimport SubjectNumber from './SubjectNumber';\r\nimport Cgpa from './Cgpa'\r\n\r\nfunction App() {\r\n  const [inputFields,setInputFields] = useState();\r\n  const [rows, setRows] = useState();\r\n  const [cgpa,setCgpa] = useState();\r\n  const [credits,setCredits] = useState({});\r\n  const [grades,setGrades] = useState({});\r\n  const [error,setError] = useState('');\r\n  const [cgpaLabel,setCgpaLabel] = useState('');\r\n  console.log(credits,grades)\r\n  /*****************************Setting number of Input fields************************************** */\r\n  const handelInputFields = (e) =>{\r\n    setRows(Number(inputFields));\r\n    //console.log([...Array(rows).keys()])\r\n    //console.log([...Array(rows)])\r\n    //console.log(inputFields);\r\n    //console.log(rows);\r\n  }\r\n  /*******************************Calculating CGPA***************************************** */\r\n  const handelCgpa = (e) =>{\r\n    const cred = Object.values(credits);\r\n    const grad = Object.values(grades);\r\n    //console.log(cred)\r\n    //console.log(grad)\r\ntry{\r\n    if(cred.length === grad.length && cred.length !== 0){\r\n      setError('')\r\n      let nr = 0\r\n      let dr = 0\r\n      for (let i = 0 ; i < cred.length; i++){\r\n        \r\n          nr+= credits[i]*grades[i];\r\n          dr += Number(credits[i]);\r\n        \r\n        \r\n        \r\n      }\r\n      let val = nr/dr;\r\n      if (!isNaN(val)){\r\n      setCgpaLabel('Your CGPA is')\r\n      setCgpa(val);\r\n      }\r\n      else{\r\n        throw error\r\n      }\r\n    }\r\n\r\n    else{\r\n      setCgpaLabel('')\r\n      setCgpa(\"\")\r\n      setError('Uh-oh! Please make sure you entered all the data.')\r\n    }\r\n}\r\ncatch{\r\n  setCgpaLabel('')\r\n  setError('Uh-oh! Please make sure you entered all the data.')\r\n  }\r\n    \r\n    //console.log(nr,dr)\r\n    //console.log(cgpa)\r\n}\r\n\r\n  return (\r\n    <div className = 'container'>\r\n      <h1>GPA CALCULATOR</h1>\r\n      <SubjectNumber \r\n      setInputFields = {setInputFields}\r\n      handelInputFields = {handelInputFields}\r\n      />\r\n      {(rows >= 1)?(\r\n        <>\r\n      <Calculator \r\n      rows = {rows}\r\n      handelCgpa = {handelCgpa}\r\n      setCredits = {setCredits}\r\n      setGrades = {setGrades}\r\n      credits = {credits}\r\n      grades = {grades}\r\n      cgpa = {cgpa}\r\n      error = {error}/>\r\n      <Cgpa \r\n      cgpa = {cgpa}\r\n      error = {error}\r\n      cgpaLabel = {cgpaLabel}/>\r\n      </>\r\n      ):(\r\n        <p></p>\r\n      )\r\n\r\n      }\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}